generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hackathon {
  id              String         @id @default(uuid())
  title           String
  description     String
  location        String
  total_prizes    Int
  tags            String[]
  content         Json           @default("{}")
  end_date        DateTime       @default(now()) @db.Timestamptz(3)
  start_date      DateTime       @default(now()) @db.Timestamptz(3)
  timezone        String         @default("UTC")
  banner          String         @default("")
  icon            String         @default("")
  small_banner    String         @default("")
  participants    Int
  top_most        Boolean?       @default(false)
  organizers      String?
  custom_link     String?
  created_by      String?
  updated_by      String?
  is_public       Boolean?
  created_by_user User?          @relation(fields: [created_by], references: [id])
  updated_by_user User?          @relation("HackathonUpdatedBy", fields: [updated_by], references: [id])
  projects        Project[]
  registrations   RegisterForm[]
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String?       @unique
  image               String?
  authentication_mode String?
  integration         String?
  last_login          DateTime?
  user_name           String?
  bio                 String?
  notification_email  String?
  profile_privacy     String?       @default("public")
  social_media        String[]
  notifications       Boolean?
  custom_attributes   String[]
  telegram_user       String?
  created_at          DateTime      @default(now()) @db.Timestamptz(3)
  updated_hackathons  Hackathon[] @relation("HackathonUpdatedBy")
  memberships         Member[]
  registrations       RegisterForm?
  hackathons          Hackathon[]
  badges              UserBadge[]
  managedTestnetNodes NodeRegistration[]
  consoleLog          ConsoleLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RegisterForm {
  id                      String    @id @default(uuid())
  utm                     String
  city                    String
  dietary                 String?
  email                   String    @unique
  interests               String
  languages               String
  roles                   String
  name                    String
  role                    String
  tools                   String
  company_name            String?
  created_at              DateTime  @default(now()) @db.Timestamptz(3)
  github_portfolio        String?
  hackathon_id            String
  hackathon_participation String
  newsletter_subscription Boolean   @default(false)
  prohibited_items        Boolean   @default(false)
  terms_event_conditions  Boolean   @default(false)
  updated_at              DateTime  @updatedAt @db.Timestamptz(3)
  web3_proficiency        String
  telegram_user           String?
  user                    User      @relation(fields: [email], references: [email], onDelete: Cascade)
  hackathon               Hackathon @relation(fields: [hackathon_id], references: [id], onDelete: Cascade)

  @@unique([hackathon_id, email])
}

model Project {
  id                  String         @id @default(uuid())
  hackaton_id         String
  project_name        String
  short_description   String
  full_description    String?        @default("")
  tech_stack          String?        @default("")
  github_repository   String?        @default("")
  demo_link           String?        @default("")
  logo_url            String?        @default("")
  cover_url           String?        @default("")
  demo_video_link     String?        @default("")
  screenshots         String[]       @default([])
  tracks              String[]       @default([])
  created_at          DateTime       @default(now()) @db.Timestamptz(3)
  updated_at          DateTime       @updatedAt @db.Timestamptz(3)
  explanation         String?        @default("")
  is_preexisting_idea Boolean        @default(false)
  small_cover_url     String?        @default("")
  tags                String[]       @default([])
  is_winner           Boolean?       @default(false)
  members             Member[]
  prizes              Prize[]
  hackathon           Hackathon      @relation(fields: [hackaton_id], references: [id], onDelete: Cascade)
  badges              ProjectBadge[]
}

model Prize {
  id         String  @id @default(uuid())
  icon       String
  prize      Int
  track      String
  project_id String
  Project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Member {
  id         String  @id @default(uuid())
  user_id    String?
  project_id String
  role       String  @default("member")
  status     String  @default("Pending Confirmation")
  email      String?
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user       User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Badge {
  id          String         @id @default(uuid())
  name        String
  description String
  image_path  String
  category    String
  users       UserBadge[]
  projects    ProjectBadge[]
  requirements    Json[]         @default([])
  current_version Int            @default(1)
}

model UserBadge {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  badge      Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  badge_id   String
  awarded_at DateTime @default(now())
  awarded_by String?
  evidence             Json?
  requirements_version Int      @default(1)
  status               Int      @db.SmallInt

  @@unique([user_id, badge_id])
}

model ProjectBadge {
  id         String   @id @default(uuid())
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String
  badge      Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  badge_id   String
  awarded_at DateTime @default(now())
  awarded_by String?
  evidence              Json?
  requirements_snapshot Json     @default("{}")
  requirements_version  Int      @default(1)
  status                Int      @db.SmallInt

  @@unique([project_id, badge_id])
}

model NodeRegistration {
  id                  String   @id @default(uuid())
  user_id             String
  subnet_id           String
  blockchain_id       String
  node_id             String
  node_index          Int?     // Node index from BuilderHub API
  public_key          String
  proof_of_possession String
  rpc_url             String
  chain_name          String?
  status              String   @default("active") // active, expired, terminated
  created_at          DateTime @default(now()) @db.Timestamptz(3)
  expires_at          DateTime @db.Timestamptz(3)
  updated_at          DateTime @updatedAt @db.Timestamptz(3)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@unique([user_id, subnet_id, node_index])
  @@index([user_id])
  @@index([status])
  @@index([subnet_id])
}

model ConsoleLog {
  id          String   @id @default(uuid())
  user_id     String
  status      String   // success, error, warning, info
  action_path String?  // Full path context (e.g., "permissioned-l1s/validator-manager-setup/deploy/validator_manager")
  data        Json?    // Flexible JSON data
  created_at  DateTime @default(now()) @db.Timestamptz(3)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([created_at])
}